/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"

#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"

// Parameter definitions
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_1_DEVICE_ID
#define LEDS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define ROW_DEVICE_ID		XPAR_AXI_GPIO_2_DEVICE_ID	/*Edited*/
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_1_IP2INTC_IRPT_INTR

#define BTN_INT 			XGPIO_IR_CH1_MASK
#define base_add 0x43C00000
unsigned int reading;
XGpio BTNInst;
XGpio LEDInst;
XGpio ROWInst;	/*Edited*/
XScuGic INTCInst;
int a=0;
int mux_signal=32;
int mux_en_flag=0;
//int row_flag = 0;
int dec_signal=0;	/*Edited*/
int dec_en_flag=1;	/*Edited - not used*/

//----------------------------------------------------
// PROTOTYPE FUNCTIONS
//----------------------------------------------------
static void BTN_Intr_Handler(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr);

//----------------------------------------------------
// INTERRUPT HANDLER FUNCTIONS
// - called by the timer, button interrupt, performs
// - LED flashing
//----------------------------------------------------

void BTN_Intr_Handler(void *InstancePtr) {
	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) != BTN_INT) {
		return;
	}
	//xil_printf(" Row Powered Up. Currently Scanned Row = %d\n\r", dec_en_flag);	/*Edited*/
	reading=Xil_In32 (base_add);
	if((mux_signal==33)|(mux_signal==65)){
		xil_printf(" Row Powered Up. Currently Scanned Row = %d\n\r", dec_signal);
		xil_printf(" Mux toggled. Current Reading Mux Number = %d\n\r", mux_en_flag);
	}
	xil_printf(" %d\n\r", reading);

/*
	btn_value = XGpio_DiscreteRead(&BTNInst, 1);

	xil_printf("buttun value changed to %d\n\r", btn_value);
	reading=Xil_In32 (base_add);
	//xil_printf("registry value %d\n\r", reading);
	Xil_Out32 (base_add,0);
	reading=Xil_In32 (base_add);
	//xil_printf("registry value after resetting %d\n\r", reading);
	XGpio_DiscreteWrite(&LEDInst, 1, btn_value);*/

	/*for loop to generate a delay */
	for (int i=0;i<=10000000;i++){
		a=a+1;
	}

	/* Decoder power up rows one by one for all 16 (0-15) I/O Pins. Toggle two Muxes */
	/*for (int j=0;j<=15;j++)
	{*/
		if((mux_signal==61)|(mux_signal==93)){
				//xil_printf(" reset");
				if(mux_en_flag){
					mux_signal=32;
					mux_en_flag=0;
				}
				else{
					mux_signal=64;
					mux_en_flag=1;
				}
			}
			else {
				mux_signal++;
			}
		XGpio_DiscreteWrite(&LEDInst, 1, mux_signal); /* write mux signal to register*/

		//dec_signal++;
		//XGpio_DiscreteWrite(&ROWInst, 1, dec_signal); /* write decoder signal to register*/
	//}
	//XGpio_DiscreteWrite(&LEDInst, 1, mux_signal);

	(void) XGpio_InterruptClear(&BTNInst, BTN_INT);
	// Enable GPIO interrupts
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	Xil_Out32 (base_add+4,0);
}

//----------------------------------------------------
// INITIAL SETUP FUNCTIONS
//----------------------------------------------------

int InterruptSystemSetup(XScuGic *XScuGicInstancePtr) {
	// Enable interrupt
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTNInst);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler,
			XScuGicInstancePtr);
	Xil_ExceptionEnable();

	return XST_SUCCESS;

}

int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr) {
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialisation
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig,
			IntcConfig->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst, INTC_GPIO_INTERRUPT_ID,
			(Xil_ExceptionHandler) BTN_Intr_Handler, (void *) GpioInstancePtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);

	return XST_SUCCESS;
}

int main() {
	xil_printf("Data Acquisition Started\n\r");
	init_platform();
	int status;
	//----------------------------------------------------
	// INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
	//----------------------------------------------------
	// Initialise LEDs



	// Initialise Push Buttons
	status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	/* Initialise ROW_DEVICE */
	XGpio_Initialize(&ROWInst, ROW_DEVICE_ID);
		if (status != XST_SUCCESS)
			return XST_FAILURE;

	// Set LEDs direction to outputs
	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);
	XGpio_SetDataDirection(&LEDInst, 1, 0x00);
	XGpio_DiscreteWrite(&LEDInst, 1, 0);

	XGpio_SetDataDirection(&ROWInst, 1, 0x00); /* ROW direction set to channel 1 mask and output */
	//XGpio_DiscreteWrite(&ROWInst, 1, 0);

	// Initialize interrupt controller
	status = IntcInitFunction(INTC_DEVICE_ID, &BTNInst);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	while (1)
		;
	return 0;
}
